

CREATE COMPUTE MODULE getId_Compute
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		DECLARE id INTEGER;
		SET id = InputLocalEnvironment.REST.Input.Parameters.id;
		SET Environment.Variables.DADOSBANCO[] = (
			SELECT al.ID, al.NAME, al.EMAIL, al.PHONENUMBER
			  FROM Database.ALUNO as al
			 WHERE al.ID = id
		);
		
		DECLARE count INTEGER CARDINALITY(Environment.Variables.DADOSBANCO.*[]);
		IF (count > 0) THEN
			SET OutputRoot.JSON.Data.Aluno.id = Environment.Variables.DADOSBANCO[1].ID;
			SET OutputRoot.JSON.Data.Aluno.name = Environment.Variables.DADOSBANCO[1].NAME;
			SET OutputRoot.JSON.Data.Aluno.email = Environment.Variables.DADOSBANCO[1].EMAIL;
			SET OutputRoot.JSON.Data.Aluno.phoneNumber = Environment.Variables.DADOSBANCO[1].PHONENUMBER;
		ELSE
			SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = 404;
			SET OutputRoot.JSON.Data.Status = 404;
			SET OutputRoot.JSON.Data.Error = 'Not found';
			SET OutputRoot.JSON.Data.Message = 'No message available';
			SET OutputRoot.JSON.Data.Path = InputLocalEnvironment.REST.Input.Path;
		END IF;
		RETURN TRUE;
	END;

	CREATE PROCEDURE CopyMessageHeaders() BEGIN
		DECLARE I INTEGER 1;
		DECLARE J INTEGER;
		SET J = CARDINALITY(InputRoot.*[]);
		WHILE I < J DO
			SET OutputRoot.*[I] = InputRoot.*[I];
			SET I = I + 1;
		END WHILE;
	END;

	CREATE PROCEDURE CopyEntireMessage() BEGIN
		SET OutputRoot = InputRoot;
	END;
END MODULE;
